/* 

Вывод программы:
2
1

Defer — ключевое слово, которое откладывает выполнение функции до выхода из текущего блока кода.

В функции test() используется именновонное возвращение значения x
Когда функция возвращает значение с помощью return без аргумента, Go использует текущее значение x как возвращаемое.
И перед фактическим возвратом x выполняются все defer вызовы
Поэтому в данном примере функция возвращает значение 2

В функции anotherTest() используется неименованное возвращение значения
Так как возвращаемое значение не именованное, текущее значение x копируется и сохраняется как возвращаемое значение
На этом этапе defer ещё не выполнен
Поэтому в данном случае возвращаемое значение 1

После этого 
x увеличивается на 1
Но возвращаемое значение уже сохранено как 1, и это увеличение уже не влияет на результат

*/

package main

import "fmt"

func test() (x int) { // возвращаемое значение x именованное
	defer func() {
		x++
	}()

	x = 1

	return
}

func anotherTest() int { возвращаемое значение x неименованное
	var x int
	defer func() {
	    x++
	}()
	
	x = 1

	return x
}

func main() {
	fmt.Println(test())			// Output: 2
	fmt.Println(anotherTest())	// Output: 1
}