/*

В языке Go (Golang) есть оператор среза и способ создания среза из последовательностей

Синтаксис: s[low:high]

Указывает два индекса: начальный (low) и конечный (high) индексы последовательности, все элементы между которыми попадут в срез

Новый срез будет ссылаться на элементы старого массива с индекса low по индекс high-1 (включая индекс low, но исключая индекс high)
Новый срез не копирует значения массива, а только указывает на непрерывный сегмент исходного массива
Поэтому изменения в срезе также повлияют на базовый массив и наоборот

a := [5]int{76, 77, 78, 79, 80}
Создаётся массив длиной 5

b := a[1:4]

a[low:high] включает элементы с индексами от low до high-1
Здесь берутся a[1], a[2], a[3] -> [77, 78, 79]

len(b) = high - low = 3
cap(b) = len(a) - low = 4

*/

package main

import "fmt"

func main() {
	a := [5]int{76, 77, 78, 79, 80}
	var b []int = a[1:4]
	fmt.Println(b) // output [77 78 79] (включая индекс 1, но исключая индекс 4)
}
